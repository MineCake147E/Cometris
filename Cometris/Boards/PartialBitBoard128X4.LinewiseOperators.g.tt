<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
#nullable enable
const string BoardType = "PartialBitBoard128X4";
var operators = new (string name, (string type, string name, bool isBoard)[] arguments)[]
{
    ("&", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("|", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("^", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("+", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("<<", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
    (">>", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
};
string GenerateQuadVectorOperations((string type, string name, bool isBoard)[] arguments, string format)
{
    var argFields = arguments.Select(a => a.isBoard ? $"{a.name}.storage" : $"{a.name}");
    return string.Format(format, argFields.ToArray());
}
var storages = Enumerable.Range(0, 4).Select(a => $"Storage{a}").ToArray();
IEnumerable<string> GenerateSimpleOperations((string type, string name, bool isBoard)[] arguments, string format)
{
    var argFields = storages.Select(b => arguments.Select(a => a.isBoard ? $"{a.name}.{b}" : $"{a.name}"));
    return argFields.Select(f => string.Format(format, f.ToArray()));
}
#>
// <auto-generated />
// .NET <#=Environment.Version#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Cometris.Utils;
using Cometris.Utils.Vector;

namespace Cometris.Boards
{
    public readonly partial struct PartialBitBoard128X4
    {
        #region Operator Overloads
<#  foreach(var o in operators){#>
        public static PartialBitBoard128X4 operator <#=o.name#>(<#=string.Join(", ", o.arguments.Select(a => $"{a.type} {a.name}"))#>)
            => new(<#=string.Join(", ", GenerateQuadVectorOperations(o.arguments, $"{{0}} {o.name} {{1}}"))#>);
        
<#  }#>
        public static PartialBitBoard128X4 operator ~(PartialBitBoard128X4 value)
            => new(<#=string.Join(", ", GenerateQuadVectorOperations([(BoardType, "value", true)], "~{0}"))#>);
        #endregion

        public static PartialBitBoard128X4 BlocksPerLine(PartialBitBoard128X4 board)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "board", true)], "VectorUtils.PopCountPerLine({0})"))#>);

        public static PartialBitBoard128X4 LineSelect(PartialBitBoard128X4 mask, PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(<#=string.Join(", ", GenerateQuadVectorOperations([(BoardType, "mask", true), (BoardType, "left", true), (BoardType, "right", true)], "QuadVector128.ConditionalSelect({0}, {1}, {2})"))#>);

        public static PartialBitBoard128X4 CompareEqualPerLineVector(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(<#=string.Join(", ", GenerateQuadVectorOperations([(BoardType, "left", true), (BoardType, "right", true)], "QuadVector128.CompareEqual({0}, {1})"))#>);
    }
}