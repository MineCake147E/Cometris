<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var countsWithName = new (int count, string name)[]
{
(1, "One"),
(2, "Two"),
(3, "Three"),
(4, "Four"),
(5, "Five"),
(6, "Six"),
(7, "Seven"),
(8, "Eight"),
(9, "Nine"),
(16, "16"),
};
var counts = Enumerable.Range(10, 22).Select(y => (count: y, name: $"{y}")).Where(x => !IsPow2(x.count)).Concat(countsWithName).OrderBy(a => a.count);
static bool IsPow2(int value) => (value & (value - 1)) == 0;
#>
// <auto-generated />
// .NET <#=Environment.Version#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cometris.Boards
{
    public readonly partial struct PartialBitBoard512
    {
        #region Vertical Shift
        #region Shift Down

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static PartialBitBoard512 ShiftDownConstantLines(PartialBitBoard512 board, [ConstantExpected] int count, ushort upperFeedValue)
        {
            ArgumentOutOfRangeException.ThrowIfNegative(count);
            return (count) switch
            {
                0 => board,
<#  foreach(var c in counts){#>
                <#=c.count#> => ShiftDown<#=c.name#>Line<#=c.count != 1 ? "s" : ""#>(board, upperFeedValue),
<#  }#>
                _ => new(upperFeedValue)
            };
        }
<#  foreach(var c in counts.Where(x => !IsPow2(x.count))){#>
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static PartialBitBoard512 ShiftDown<#=c.name#>Lines(PartialBitBoard512 board, ushort upperFeedValue)
        {
<#      if ((c.count & 1) == 0)
        {
            if (c.count <= 8){#>
            var zmm1 = Vector128.Create(upperFeedValue).ToVector256Unsafe().ToVector512Unsafe().AsUInt32();
<#          } else {#>
            var zmm1 = Vector512.Create(upperFeedValue).AsUInt32();
<#          }#>
            var zmm0 = board.storage.AsUInt32();
            return new(Avx512F.AlignRight32(zmm1, zmm0, <#=c.count / 2#>).AsUInt16());
<#      } else {#>
            var zmm0 = board.storage;
            var zmm1 = Vector512.Create(upperFeedValue).AsUInt32();
<#          if (c.count <= 8){#>
            var zmm2 = Avx512F.AlignRight32(zmm1.AsUInt32(), zmm0.AsUInt32(), 4).AsUInt16();
            return new(Avx512BW.AlignRight(zmm2.AsByte(), zmm0.AsByte(), <#=c.count * 2#>).AsUInt16());
<#          } else {#>
            zmm0 = Avx512F.AlignRight32(zmm1, zmm0.AsUInt32(), <#=c.count / 2#>).AsUInt16();
            var zmm2 = Avx512F.AlignRight32(zmm1.AsUInt32(), zmm0.AsUInt32(), 4).AsUInt16();
            return new(Avx512BW.AlignRight(zmm2.AsByte(), zmm0.AsByte(), 2).AsUInt16());
<#          }
        }#>
        }

<#  }#>
        #endregion

        #region Shift Up

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static PartialBitBoard512 ShiftUpConstantLines(PartialBitBoard512 board, [ConstantExpected] int count, ushort lowerFeedValue)
        {
            ArgumentOutOfRangeException.ThrowIfNegative(count);
            return (count) switch
            {
                0 => board,
<#  foreach(var c in counts){#>
                <#=c.count#> => ShiftUp<#=c.name#>Line<#=c.count != 1 ? "s" : ""#>(board, lowerFeedValue),
<#  }#>
                _ => new(lowerFeedValue)
            };
        }
<#  foreach(var c in counts.Where(x => !IsPow2(x.count))){#>
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static PartialBitBoard512 ShiftUp<#=c.name#>Lines(PartialBitBoard512 board, ushort lowerFeedValue)
        {
<#      if ((c.count & 1) == 0)
        {#>
            var zmm1 = Vector512.Create(lowerFeedValue).AsUInt32();
            var zmm0 = board.storage.AsUInt32();
            return new(Avx512F.AlignRight32(zmm0, zmm1, <#=16 - c.count / 2#>).AsUInt16());
<#      } else {#>
            var zmm0 = board.storage;
            var zmm1 = Vector512.Create(lowerFeedValue).AsUInt32();
<#          if (c.count <= 8){#>
            var zmm2 = Avx512F.AlignRight32(zmm0.AsUInt32(), zmm1.AsUInt32(), 12).AsUInt16();
            return new(Avx512BW.AlignRight(zmm0.AsByte(), zmm2.AsByte(), <#= 16 - c.count * 2#>).AsUInt16());
<#          } else {#>
            zmm0 = Avx512F.AlignRight32(zmm0.AsUInt32(), zmm1, <#=16 - c.count / 2#>).AsUInt16();
            var zmm2 = Avx512F.AlignRight32(zmm0.AsUInt32(), zmm1.AsUInt32(), 12).AsUInt16();
            return new(Avx512BW.AlignRight(zmm0.AsByte(), zmm2.AsByte(), 14).AsUInt16());
<#          }
        }#>
        }

<#  }#>
        #endregion
        #endregion
    }
}