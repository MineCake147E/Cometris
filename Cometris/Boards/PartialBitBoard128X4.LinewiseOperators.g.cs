// <auto-generated />
// .NET 8.0.10
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Cometris.Utils;

namespace Cometris.Boards
{
    public readonly partial struct PartialBitBoard128X4
    {
        #region Operator Overloads
        public static PartialBitBoard128X4 operator &(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage0 & right.storage0, left.storage1 & right.storage1, left.storage2 & right.storage2, left.storage3 & right.storage3);
        
        public static PartialBitBoard128X4 operator |(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage0 | right.storage0, left.storage1 | right.storage1, left.storage2 | right.storage2, left.storage3 | right.storage3);
        
        public static PartialBitBoard128X4 operator ^(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage0 ^ right.storage0, left.storage1 ^ right.storage1, left.storage2 ^ right.storage2, left.storage3 ^ right.storage3);
        
        public static PartialBitBoard128X4 operator +(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage0 + right.storage0, left.storage1 + right.storage1, left.storage2 + right.storage2, left.storage3 + right.storage3);
        
        public static PartialBitBoard128X4 operator <<(PartialBitBoard128X4 left, [ConstantExpected] int right)
            => new(left.storage0 << right, left.storage1 << right, left.storage2 << right, left.storage3 << right);
        
        public static PartialBitBoard128X4 operator >>(PartialBitBoard128X4 left, [ConstantExpected] int right)
            => new(left.storage0 >> right, left.storage1 >> right, left.storage2 >> right, left.storage3 >> right);
        
        public static PartialBitBoard128X4 operator ~(PartialBitBoard128X4 value)
            => new(~value.storage0, ~value.storage1, ~value.storage2, ~value.storage3);
        #endregion

        public static PartialBitBoard128X4 BlocksPerLine(PartialBitBoard128X4 board)
            => new(VectorUtils.PopCountPerLine(board.storage0), VectorUtils.PopCountPerLine(board.storage1), VectorUtils.PopCountPerLine(board.storage2), VectorUtils.PopCountPerLine(board.storage3));

        public static PartialBitBoard128X4 LineSelect(PartialBitBoard128X4 mask, PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(VectorUtils.BlendVariable(left.storage0, right.storage0, mask.storage0), VectorUtils.BlendVariable(left.storage1, right.storage1, mask.storage1), VectorUtils.BlendVariable(left.storage2, right.storage2, mask.storage2), VectorUtils.BlendVariable(left.storage3, right.storage3, mask.storage3));

        public static PartialBitBoard128X4 CompareEqualPerLineVector(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(Vector128.Equals(left.storage0, right.storage0), Vector128.Equals(left.storage1, right.storage1), Vector128.Equals(left.storage2, right.storage2), Vector128.Equals(left.storage3, right.storage3));
    }
}