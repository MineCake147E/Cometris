// <auto-generated />
// .NET 9.0.0
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Cometris.Utils;
using Cometris.Utils.Vector;

namespace Cometris.Boards
{
    public readonly partial struct PartialBitBoard128X4
    {
        #region Operator Overloads
        public static PartialBitBoard128X4 operator &(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage & right.storage);
        
        public static PartialBitBoard128X4 operator |(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage | right.storage);
        
        public static PartialBitBoard128X4 operator ^(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage ^ right.storage);
        
        public static PartialBitBoard128X4 operator +(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(left.storage + right.storage);
        
        public static PartialBitBoard128X4 operator <<(PartialBitBoard128X4 left, [ConstantExpected] int right)
            => new(left.storage << right);
        
        public static PartialBitBoard128X4 operator >>(PartialBitBoard128X4 left, [ConstantExpected] int right)
            => new(left.storage >> right);
        
        public static PartialBitBoard128X4 operator ~(PartialBitBoard128X4 value)
            => new(~value.storage);
        #endregion

        public static PartialBitBoard128X4 BlocksPerLine(PartialBitBoard128X4 board)
            => new(VectorUtils.PopCountPerLine(board.Storage0), VectorUtils.PopCountPerLine(board.Storage1), VectorUtils.PopCountPerLine(board.Storage2), VectorUtils.PopCountPerLine(board.Storage3));

        public static PartialBitBoard128X4 LineSelect(PartialBitBoard128X4 mask, PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(QuadVector128.ConditionalSelect(mask.storage, left.storage, right.storage));

        public static PartialBitBoard128X4 CompareEqualPerLineVector(PartialBitBoard128X4 left, PartialBitBoard128X4 right)
            => new(QuadVector128.CompareEqual(left.storage, right.storage));
    }
}