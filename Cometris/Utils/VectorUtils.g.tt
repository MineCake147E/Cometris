<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
#nullable enable
const string BoardType = "QuadVector128<T>";
const string VectorType = "Vector128<T>";
var operators = new (string name, (string type, string name, bool isBoard)[] arguments)[]
{
    ("&", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("|", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("^", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("+", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("-", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("*", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("/", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("&", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("|", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("^", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("+", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("-", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("*", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("/", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("<<", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
    (">>", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
};
var comparisons = new string[]
{
    "GreaterThan",
    "GreaterThanOrEqual",
    "LessThan",
    "LessThanOrEqual",
};
var types = (new (string name, string fullName, int size, bool isInteger, bool isSigned)[]
{
    ("byte", "Byte", sizeof(byte), true, false),
    ("sbyte", "SByte", sizeof(sbyte), true, true),
    ("ushort", "UInt16", sizeof(ushort), true, false),
    ("short", "Int16", sizeof(short), true, true),
    ("uint", "UInt32", sizeof(uint), true, false),
    ("int", "Int32", sizeof(int), true, true),
    ("float", "Single", sizeof(float), false, true),
    ("ulong", "UInt64", sizeof(ulong), true, false),
    ("long", "Int64", sizeof(long), true, true),
    ("double", "Double", sizeof(double), false, true),
}).Select(a => (a.name, a.fullName, a.size, a.isInteger, a.isSigned, elements: 64 / a.size, elementsPerVector128: 16 / a.size));
var storages = Enumerable.Range(0, 4).Select(a => $"V{a}").ToArray();
IEnumerable<string> GenerateSimpleOperations((string type, string name, bool isBoard)[] arguments, string format)
{
    var argFields = storages.Select(b => arguments.Select(a => a.isBoard ? $"{a.name}.{b}" : $"{a.name}"));
    return argFields.Select(f => string.Format(format, f.ToArray()));
}
#>
// <auto-generated />
// .NET <#=Environment.Version#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cometris.Utils
{
    public static partial class VectorUtils
    {
        public static Vector128<T> BroadcastFirstElement<T>(this Vector128<T> vector) where T : unmanaged
        {
<#  foreach(var t in types){
#>
            if (typeof(T) == typeof(<#=t.name#>))
            {
                return BroadcastFirstElement<#=t.fullName#>(vector.As<#=t.fullName#>()).As<<#=t.name#>, T>();
            }
<#  }#>
            return Vector128.Create(vector.GetElement(0));
        }

    }
}