// <auto-generated />
// .NET 9.0.0
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cometris.Utils
{
    public static partial class VectorUtils
    {
        public static Vector128<T> BroadcastFirstElement<T>(this Vector128<T> vector) where T : unmanaged
        {
            if (typeof(T) == typeof(byte))
            {
                return BroadcastFirstElementByte(vector.AsByte()).As<byte, T>();
            }
            if (typeof(T) == typeof(sbyte))
            {
                return BroadcastFirstElementSByte(vector.AsSByte()).As<sbyte, T>();
            }
            if (typeof(T) == typeof(ushort))
            {
                return BroadcastFirstElementUInt16(vector.AsUInt16()).As<ushort, T>();
            }
            if (typeof(T) == typeof(short))
            {
                return BroadcastFirstElementInt16(vector.AsInt16()).As<short, T>();
            }
            if (typeof(T) == typeof(uint))
            {
                return BroadcastFirstElementUInt32(vector.AsUInt32()).As<uint, T>();
            }
            if (typeof(T) == typeof(int))
            {
                return BroadcastFirstElementInt32(vector.AsInt32()).As<int, T>();
            }
            if (typeof(T) == typeof(float))
            {
                return BroadcastFirstElementSingle(vector.AsSingle()).As<float, T>();
            }
            if (typeof(T) == typeof(ulong))
            {
                return BroadcastFirstElementUInt64(vector.AsUInt64()).As<ulong, T>();
            }
            if (typeof(T) == typeof(long))
            {
                return BroadcastFirstElementInt64(vector.AsInt64()).As<long, T>();
            }
            if (typeof(T) == typeof(double))
            {
                return BroadcastFirstElementDouble(vector.AsDouble()).As<double, T>();
            }
            return Vector128.Create(vector.GetElement(0));
        }

    }
}