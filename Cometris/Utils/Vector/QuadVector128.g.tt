<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
#nullable enable
const string BoardType = "QuadVector128<T>";
const string VectorType = "Vector128<T>";
var operators = new (string name, (string type, string name, bool isBoard)[] arguments)[]
{
    ("&", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("&", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("&", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("|", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("|", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("|", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("^", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("^", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("^", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("+", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("+", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("+", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("-", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("-", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("-", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("*", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("*", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("*", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("/", [(BoardType, "left", true), (BoardType, "right", true)]),
    ("/", [(VectorType, "left", false), (BoardType, "right", true)]),
    ("/", [(BoardType, "left", true), (VectorType, "right", false)]),
    ("<<", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
    (">>", [(BoardType, "left", true), ("[ConstantExpected] int", "right", false)]),
};
var comparisons = new string[]
{
    "GreaterThan",
    "GreaterThanOrEqual",
    "LessThan",
    "LessThanOrEqual",
};
var types = (new (string name, string fullName, int size, bool isInteger, bool isSigned)[]
{
    ("byte", "Byte", sizeof(byte), true, false),
    ("sbyte", "SByte", sizeof(sbyte), true, true),
    ("ushort", "UInt16", sizeof(ushort), true, false),
    ("short", "Int16", sizeof(short), true, true),
    ("uint", "UInt32", sizeof(uint), true, false),
    ("int", "Int32", sizeof(int), true, true),
    ("float", "Single", sizeof(float), false, true),
    ("ulong", "UInt64", sizeof(ulong), true, false),
    ("long", "Int64", sizeof(long), true, true),
    ("double", "Double", sizeof(double), false, true),
}).Select(a => (a.name, a.fullName, a.size, a.isInteger, a.isSigned, elements: 64 / a.size, elementsPerVector128: 16 / a.size));
var storages = Enumerable.Range(0, 4).Select(a => $"V{a}").ToArray();
IEnumerable<string> GenerateSimpleOperations((string type, string name, bool isBoard)[] arguments, string format)
{
    var argFields = storages.Select(b => arguments.Select(a => a.isBoard ? $"{a.name}.{b}" : $"{a.name}"));
    return argFields.Select(f => string.Format(format, f.ToArray()));
}
#>
// <auto-generated />
// .NET <#=Environment.Version#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cometris.Utils.Vector
{
    public readonly partial struct QuadVector128<T> where T : unmanaged
    {
        #region Operator Overloads
<#  foreach(var o in operators){#>
        public static QuadVector128<T> operator <#=o.name#>(<#=string.Join(", ", o.arguments.Select(a => $"{a.type} {a.name}"))#>)
            => new(<#=string.Join(", ", GenerateSimpleOperations(o.arguments, $"{{0}} {o.name} {{1}}"))#>);
        
<#  }#>
        public static QuadVector128<T> operator ~(QuadVector128<T> value)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "value", true)], "~{0}"))#>);
        #endregion
    }

    public static partial class QuadVector128
    {
        /// <returns>mask ? left : right</returns>
        public static QuadVector128<T> ConditionalSelect<T>(QuadVector128<T> mask, QuadVector128<T> left, QuadVector128<T> right) where T : unmanaged
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "mask", true), (BoardType, "left", true), (BoardType, "right", true)], "Vector128.ConditionalSelect({0}, {1}, {2})"))#>);

        public static QuadVector128<T> CompareEqual<T>(QuadVector128<T> left, QuadVector128<T> right) where T : unmanaged
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "left", true), (BoardType, "right", true)], "Vector128.Equals({0}, {1})"))#>);

        public static QuadVector128<byte> ShuffleBytesPerLane(QuadVector128<byte> tables, QuadVector128<byte> indices)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "tables", true), (BoardType, "indices", true)], "VectorUtils.VectorTableLookup({0}, {1})"))#>);

        public static QuadVector128<byte> ShuffleBytesPerLane(QuadVector128<byte> tables, Vector128<byte> indices)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "tables", true), (VectorType, "indices", false)], "VectorUtils.VectorTableLookup({0}, {1})"))#>);

        public static QuadVector128<byte> ShuffleBytesPerLane(Vector128<byte> table, QuadVector128<byte> indices)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(VectorType, "table", false), (BoardType, "indices", true)], "VectorUtils.VectorTableLookup({0}, {1})"))#>);

        public static QuadVector128<TTo> As<TFrom, TTo>(this QuadVector128<TFrom> vector) where TFrom : unmanaged where TTo : unmanaged
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "vector", true)], "Vector128.As<TFrom, TTo>({0})"))#>);

        public static QuadVector128<T> BroadcastFirstElementPerLane<T>(this QuadVector128<T> vector) where T : unmanaged
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "vector", true)], "VectorUtils.BroadcastFirstElement({0})"))#>);
        

<#
    foreach(var t in types){
#>
        public static QuadVector128<<#=t.name#>> As<#=t.fullName#><T>(this QuadVector128<T> vector) where T : unmanaged
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "vector", true)], $"Vector128.As<T, {t.name}>({{0}})"))#>);

<#  }#>
<#
    foreach (var c in comparisons)
    {
        foreach(var t in types){
#>
        public static QuadVector128<<#=t.name#>> Compare<#=c#>(QuadVector128<<#=t.name#>> left, QuadVector128<<#=t.name#>> right)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "left", true), (BoardType, "right", true)], $"Vector128.{c}({{0}}, {{1}})"))#>);

        public static QuadVector128<<#=t.name#>> Compare<#=c#>(QuadVector128<<#=t.name#>> left, Vector128<<#=t.name#>> right)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "left", true), (VectorType, "right", false)], $"Vector128.{c}({{0}}, {{1}})"))#>);

        public static QuadVector128<<#=t.name#>> Compare<#=c#>(Vector128<<#=t.name#>> left, QuadVector128<<#=t.name#>> right)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(VectorType, "left", false), (BoardType, "right", true)], $"Vector128.{c}({{0}}, {{1}})"))#>);

<#      }
    }
#>
<#
    foreach(var t in types.Where(a => a.isInteger)){
#>
        public static QuadVector128<<#=t.name#>> ShiftLeftLogical(<#=$"QuadVector128<{t.name}> vector, int shiftCount"#>)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "vector", true), ("int", "shiftCount", false)], "Vector128.ShiftLeft({0}, {1})"))#>);

<#  }#>
<#
    foreach(var t in types.Where(a => a.isInteger)){
        var shiftType = t.isSigned ? "Arithmetic" : "Logical";
#>
        public static QuadVector128<<#=t.name#>> ShiftRight<#=shiftType#>(<#=$"QuadVector128<{t.name}> vector, int shiftCount"#>)
            => new(<#=string.Join(", ", GenerateSimpleOperations([(BoardType, "vector", true), ("int", "shiftCount", false)], $"Vector128.ShiftRight{shiftType}({{0}}, {{1}})"))#>);

<#  }#>
<#  foreach(var t in types){
#>
<#  }#>
<#  foreach(var t in types){
        var elements = t.elements;
        var elementsPerVector128 = t.elementsPerVector128;
        var elementParamNames = Enumerable.Range(0, elements).Select(a => $"{t.name} e{a}").ToArray();
        var elementNames = Enumerable.Range(0, elements).Select(a => $"e{a}").ToArray();
#>
        public static QuadVector128<<#=t.name#>> Create(<#=string.Join(", ", elementParamNames)#>)
            => new(<#=string.Join(", ", Enumerable.Range(0, 4).Select(a => $"Vector128.Create({string.Join(", ", new ArraySegment<string>(elementNames, a * elementsPerVector128, elementsPerVector128).AsSpan())})"))#>);
        
<#  }
    foreach(var t in types){#>
        public static QuadVector128<<#=t.name#>> Create(<#=$"{t.name} value"#>)
        {
            var v0_nx = Vector128.Create(value);
            return new(v0_nx, v0_nx, v0_nx, v0_nx);
        }

<#  }#>
<#
    foreach(var t in types){#>
        public static QuadVector128<<#=t.name#>> CreateScalar(<#=$"{t.name} value"#>)
            => new(Vector128.CreateScalar(value), default, default, default);

<#  }#>
    }
}