<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated />
using System;
using System.Buffers;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;

using Cometris.Boards;

namespace Cometris.Tests.Boards
{
    [TestFixture(typeof(PartialBitBoard256X2), typeof(PartialBitBoard256X2))]
    [TestFixture(typeof(PartialBitBoard512), typeof(Vector512<ushort>))]
    public partial class ShiftVerticalConstantTests<TBitBoard, TLineMask>
        where TBitBoard : unmanaged, ICompactMaskableBitBoard<TBitBoard, ushort, TLineMask, uint>
        where TLineMask : unmanaged, IEquatable<TLineMask>
    {
        #region ShiftDownConstant
<#  for(int i = 0; i < 32; i++){#>
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant<#=i#>LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[<#=i#>..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, <#=i#>, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
<#  }#>
        #endregion
        #region ShiftUpConstant
<#  for(int i = 0; i < 32; i++){#>
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant<#=i#>LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), <#=i#>);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, <#=i#>, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

<#  }#>
        #endregion
    }
}