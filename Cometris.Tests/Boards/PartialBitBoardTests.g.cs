// <auto-generated />
using System;
using System.Buffers;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;

using Cometris.Boards;

namespace Cometris.Tests.Boards
{
    [TestFixture(typeof(PartialBitBoard256X2), typeof(PartialBitBoard256X2))]
    [TestFixture(typeof(PartialBitBoard512), typeof(Vector512<ushort>))]
    public partial class ShiftVerticalConstantTests<TBitBoard, TLineMask>
        where TBitBoard : unmanaged, ICompactMaskableBitBoard<TBitBoard, ushort, TLineMask, uint>
        where TLineMask : unmanaged, IEquatable<TLineMask>
    {
        #region ShiftDownConstant
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant0LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[0..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 0, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant1LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[1..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 1, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant2LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[2..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 2, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant3LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[3..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 3, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant4LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[4..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 4, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant5LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[5..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 5, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant6LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[6..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 6, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant7LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[7..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 7, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant8LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[8..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 8, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant9LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[9..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 9, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant10LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[10..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 10, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant11LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[11..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 11, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant12LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[12..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 12, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant13LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[13..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 13, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant14LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[14..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 14, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant15LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[15..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 15, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant16LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[16..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 16, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant17LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[17..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 17, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant18LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[18..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 18, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant19LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[19..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 19, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant20LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[20..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 20, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant21LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[21..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 21, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant22LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[22..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 22, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant23LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[23..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 23, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant24LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[24..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 24, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant25LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[25..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 25, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant26LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[26..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 26, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant27LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[27..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 27, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant28LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[28..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 28, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant29LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[29..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 29, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant30LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[30..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 30, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftDownConstant31LinesShiftsCorrectly()
        {
            ReadOnlySpan<ushort> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
            var board = TBitBoard.LoadUnsafe(ref MemoryMarshal.GetReference(a));
            var expected = TBitBoard.FromBoard(a[31..], FullBitBoard.EmptyRow);
            var actual = TBitBoard.ShiftDownConstantLines(board, 31, FullBitBoard.EmptyRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }
        
        #endregion
        #region ShiftUpConstant
        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant0LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 0);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 0, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant1LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 1);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 1, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant2LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 2);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 2, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant3LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 3);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 3, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant4LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 4);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 4, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant5LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 5);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 5, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant6LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 6);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 6, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant7LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 7);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 7, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant8LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 8);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 8, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant9LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 9);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 9, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant10LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 10);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 10, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant11LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 11);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 11, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant12LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 12);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 12, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant13LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 13);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 13, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant14LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 14);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 14, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant15LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 15);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 15, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant16LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 16);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 16, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant17LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 17);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 17, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant18LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 18);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 18, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant19LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 19);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 19, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant20LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 20);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 20, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant21LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 21);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 21, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant22LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 22);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 22, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant23LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 23);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 23, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant24LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 24);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 24, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant25LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 25);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 25, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant26LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 26);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 26, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant27LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 27);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 27, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant28LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 28);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 28, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant29LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 29);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 29, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant30LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 30);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 30, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public void ShiftUpConstant31LinesShiftsCorrectly()
        {
            var q = new FixedArray64<ushort>();
            var board = TBitBoard.FromBoard([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], TBitBoard.ZeroLine);
            Span<ushort> a = q;
            a.Fill(FullBitBoard.FullRow);
            TBitBoard.StoreUnsafe(board, ref MemoryMarshal.GetReference(a), 31);
            var expected = TBitBoard.FromBoard(a, FullBitBoard.FullRow);
            var actual = TBitBoard.ShiftUpConstantLines(board, 31, FullBitBoard.FullRow);
            Console.WriteLine(actual.ToString());
            Assert.That(actual, Is.EqualTo(expected));
        }

        #endregion
    }
}